// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "MISTParser.h"
#include <iostream>
#include <vector>
#include <Windows.h>
#include <fstream>


map<string, Statistic*> statistics;

void writeGlobalStatistic(string fastadir) {
	const string filename = "resume.stats";
	ofstream wr;
	if (!wr.is_open()) {
		//Open it first
		wr.open(fastadir.append(filename));
	}

	//Sort statistic by average
	vector<Statistic*> sorted;
	for (map<string, Statistic*>::iterator it = statistics.begin(); it != statistics.end(); it++) {
		sorted.push_back(it->second);
		it->second->countAverage();
	}

	sort(sorted.begin(),sorted.end(), [=](Statistic* a, Statistic* b)
	{
		return (*a).getAverage() > (*b).getAverage();
	});

	for (vector<Statistic*>::iterator it = sorted.begin(); it != sorted.end(); it++) {
		wr << (*it)->getCode() << " || " << (*it)->getLowestBound() << " || " << (*it)->getAverage() << " || " << (*it)->getHighestBound() << endl;
	}

	wr.close();
}

int main(int argc, char *argv[])
{
	if (argc != 4) {
		cout << "MISTParser.exe <family_name> <dataset_dir> <fasta_dir>" << endl;
		return 0;
	}

	//Parse All specific malware family
	const string familyname = argv[1];
	string datasetDir = argv[2]; //input file
	string fastaDir = argv[3]; //output file
	HANDLE hFind;
	WIN32_FIND_DATAA data;

	//hFind = FindFirstFileA("dataset\\*.*", &data);
	string temp = datasetDir;
	temp.append("*.*");
	hFind = FindFirstFileA(temp.c_str(), &data);
	
	if (hFind != INVALID_HANDLE_VALUE) {
		int total = 0;
		do {
			string filename = data.cFileName;
			if (filename.find(familyname) != std::string::npos) {
				string prefix = datasetDir;
				string infile = prefix.append(filename);

				prefix = fastaDir;
				string outfile = prefix.append(filename.append(".fa"));
				
				total++;

				MISTParser parser(infile,outfile,&statistics);
				parser.parsing();
				if (total > 0) break;
			}
		} while (FindNextFileA(hFind, &data));
		FindClose(hFind);
		writeGlobalStatistic(fastaDir);
		cout << "total :" << total << endl;
	}
	else printf("FindFirstFile failed %d\n", GetLastError());
}

