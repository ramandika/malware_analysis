#include "stdafx.h"
#include <easyhook.h>
#include <string>
#include <iostream>
#include <Windows.h>
#include <Tlhelp32.h>
#include <vector>
#include <fstream>
#include <tchar.h>
#include <WinSock2.h>
#define BUFSIZE MAX_PATH
using namespace std;
DWORD gFreqOffset = 0;
ofstream myfile;
void WINAPI myDeleteCriticalSection(LPCRITICAL_SECTION lp){
	cout << "myDeleteCriticalSection" << endl;
DeleteCriticalSection(lp);
}
void WINAPI myLeaveCriticalSection(LPCRITICAL_SECTION lp){
	cout << "myLeaveCriticalSection" << endl;
LeaveCriticalSection(lp);
}
void WINAPI myEnterCriticalSection(LPCRITICAL_SECTION lp){
	cout << "myEnterCriticalSection" << endl;
EnterCriticalSection(lp);
}
BOOL WINAPI myVirtualFree(LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType){
	cout << "myVirtualFree" << endl;
	return VirtualFree(lpAddress,dwSize,dwFreeType);
}
HLOCAL WINAPI myLocalFree(HLOCAL hMem){
	cout << "myLocalFree" << endl;
	return LocalFree(hMem);
}
DWORD WINAPI myGetCurrentThreadId( ){
	cout << "myGetCurrentThreadId" << endl;
	return GetCurrentThreadId();
}
VOID WINAPI myGetStartupInfoW(LPSTARTUPINFO lp){
	cout << "myGetStartupInfoW" << endl;
	return GetStartupInfoW(lp);
}
LPTSTR WINAPI myGetCommandLineW( ){
	cout << "myGetCommandLineW" << endl;
	return GetCommandLineW();
}
BOOL WINAPI myFreeLibrary(HMODULE hModule){
	cout << "myFreeLibrary" << endl;
	return FreeLibrary(hModule);
}
VOID WINAPI myExitProcess(UINT uExitCode){
	cout << "myExitProcess" << endl;
	return ExitProcess(uExitCode);
}
BOOL WINAPI myWriteFile(HANDLE hFile,LPCVOID lpBuffer,DWORD toWrite,LPDWORD written,LPOVERLAPPED overlap){
	cout << "myWriteFile" << endl;
	return WriteFile(hFile,lpBuffer,toWrite,written,overlap);
}
LONG WINAPI myUnhandledExceptionFilter(struct _EXCEPTION_POINTERS* ExceptionInfo){
	cout << "myUnhandledExceptionFilter" << endl;
	return UnhandledExceptionFilter(ExceptionInfo);
}
void WINAPI myRtlUnwind(PVOID TargetFrame,PVOID targetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue){
	cout << "myRtlUnwind" << endl;
RtlUnwind(TargetFrame,targetIp,ExceptionRecord,ReturnValue);
}
void WINAPI myRaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberofArgs,const ULONG_PTR* lpArgs){
	cout << "myRaiseException" << endl;
RaiseException(dwExceptionCode,dwExceptionFlags,nNumberofArgs,lpArgs);
}
HANDLE WINAPI myGetStdHandle(DWORD nStdHandle){
	cout << "myGetStdHandle" << endl;
	return GetStdHandle(nStdHandle);
}
int WINAPI myGetKeyboardType(int nTypeFlag){
	cout << "myGetKeyboardType" << endl;
	return GetKeyboardType(nTypeFlag);
}
int WINAPI myMessageBoxW(HWND hWnd,LPCTSTR lpText,LPCTSTR lpCaption, UINT uType){
	cout << "myMessageBoxW" << endl;
	return MessageBoxW(hWnd,lpText,lpCaption,uType);
}
LONG WINAPI myRegQueryValueExW(HKEY hkey,LPCTSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData){
	cout << "myRegQueryValueExW" << endl;
	return RegQueryValueExW(hkey,lpValueName,lpReserved,lpType,lpData,lpcbData);
}
LONG WINAPI myRegOpenKeyExW(HKEY hkey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult){
	cout << "myRegOpenKeyExW" << endl;
	return RegOpenKeyExW(hkey,lpSubKey,ulOptions,samDesired,phkResult);
}
LONG WINAPI myRegCloseKey(HKEY hkey){
	cout << "myRegCloseKey" << endl;
	return RegCloseKey(hkey);
}
BOOL WINAPI myTlsSetValue(DWORD dwTlsIdx,LPVOID lpTlsVal){
	cout << "myTlsSetValue" << endl;
	return TlsSetValue(dwTlsIdx,lpTlsVal);
}
LPVOID WINAPI myTlsGetValue(DWORD dwTlsIdx){
	cout << "myTlsGetValue" << endl;
	return TlsGetValue(dwTlsIdx);
}
BOOL myTlsFree(DWORD dwTlsIdx){
	cout << "myTlsFree" << endl;
	return TlsFree(dwTlsIdx);
}
DWORD WINAPI myTlsAlloc( ){
	cout << "myTlsAlloc" << endl;
	return TlsAlloc();
}
HLOCAL WINAPI myLocalAlloc(UINT uFlags,SIZE_T uBytes){
	cout << "myLocalAlloc" << endl;
	return LocalAlloc(uFlags,uBytes);
}
int myclosesocket(SOCKET s){
	cout << "myclosesocket" << endl;
	return closesocket(s);
}
int myWSACleanup( ){
	cout << "myWSACleanup" << endl;
	return WSACleanup();
}
int myrecv(SOCKET s,char* buf,int len,int flags){
	cout << "myrecv" << endl;
	return recv(s,buf,len,flags);
}
int mysend(SOCKET s,const char* buf,int len,int flags){
	cout << "mysend" << endl;
	return send(s,buf,len,flags);
}
int myconnect(SOCKET s,const struct sockaddr* name,int namelen){
	cout << "myconnect" << endl;
	return connect(s,name,namelen);
}
SOCKET WSAAPI mysocket(int af,int type,int protocol){
	cout << "mysocket" << endl;
	return socket(af,type,protocol);
}
int myWSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData){
	cout << "myWSAStartup" << endl;
	return WSAStartup(wVersionRequested,lpWSAData);
}
struct hostent* FAR mygethostbyname(const char* name){
	cout << "mygethostbyname" << endl;
	return gethostbyname(name);
}
LONG WINAPI myRegSetValueExW(HKEY hKey,LPCTSTR lpValueName,DWORD reserved,DWORD dwType,const BYTE* lpData,DWORD cbData){
	cout << "myRegSetValueExW" << endl;
	return RegSetValueExW(hKey,lpValueName,reserved,dwType,lpData,cbData);
}
LONG WINAPI myRegCreateKeyW(HKEY hKey,LPCTSTR lpSubkey,PHKEY phkResult){
	cout << "myRegCreateKeyW" << endl;
	return RegCreateKeyW(hKey,lpSubkey,phkResult);
}
BOOL WINAPI myAdjustTokenPrivileges(HANDLE tokenHandle,BOOL disAllPriv,PTOKEN_PRIVILEGES newstate,DWORD bufferlength,PTOKEN_PRIVILEGES ps,PDWORD returnLengh){
	cout << "myAdjustTokenPrivileges" << endl;
	return AdjustTokenPrivileges(tokenHandle,disAllPriv,newstate,bufferlength,ps,returnLengh);
}
BOOL WINAPI myLookupPrivilegeValueW(LPCTSTR lpSystemName,LPCTSTR lpName,PLUID lpLuid){
	cout << "myLookupPrivilegeValueW" << endl;
	return LookupPrivilegeValueW(lpSystemName,lpName,lpLuid);
}
BOOL WINAPI myOpenProcessToken(HANDLE PrHandle,DWORD DesiredAccess,PHANDLE tokenHandle){
	cout << "myOpenProcessToken" << endl;
	return OpenProcessToken(PrHandle,DesiredAccess,tokenHandle);
}
HWND WINAPI myGetForegroundWindow( ){
	cout << "myGetForegroundWindow" << endl;
	return GetForegroundWindow();
}
int mywvsprintfW(LPTSTR lpOutput,LPCTSTR lpFmt,va_list arglist){
	cout << "mywvsprintfW" << endl;
	return wvsprintfW(lpOutput,lpFmt,arglist);
}
BOOL WINAPI myCloseHandle(HANDLE hObject){
	cout << "myCloseHandle" << endl;
	return CloseHandle(hObject);
}
void myRtlMoveMemory(PVOID Destination,const VOID* Source,SIZE_T Length){
	cout << "myRtlMoveMemory" << endl;
RtlMoveMemory(Destination,Source,Length);
}
void myRtlZeroMemory(PVOID dest,SIZE_T length){
	cout << "myRtlZeroMemory" << endl;
RtlZeroMemory(dest,length);
}
BOOL WINAPI myWriteProcessMemory(HANDLE hProcess,LPVOID lpBaseAddress,LPCVOID lpBuffer,SIZE_T nSize,SIZE_T* lpNumberOfBytesWritten){
	cout << "myWriteProcessMemory" << endl;
	return WriteProcessMemory(hProcess,lpBaseAddress,lpBuffer,nSize,lpNumberOfBytesWritten);
}
BOOL WINAPI myReadProcessMemory(HANDLE hProcess,LPCVOID lpBaseAddress,LPVOID lpBuffer,SIZE_T nSize,SIZE_T* lpNumberOfBytesRead){
	cout << "myReadProcessMemory" << endl;
	return ReadProcessMemory(hProcess,lpBaseAddress,lpBuffer,nSize,lpNumberOfBytesRead);
}
BOOL WINAPI myVirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect){
	cout << "myVirtualProtect" << endl;
	return VirtualProtect(lpAddress,dwSize,flNewProtect,lpflOldProtect);
}
VOID WINAPI mySleep(DWORD dwMilis){
	cout << "mySleep" << endl;
	return Sleep(dwMilis);
}
DWORD WINAPI myGetTickCount( ){
	cout << "myGetTickCount" << endl;
	return GetTickCount();
}
BOOL WINAPI myMoveFileExW(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,DWORD dwFlags){
	cout << "myMoveFileExW" << endl;
	return MoveFileExW(lpExistingFileName,lpNewFileName,dwFlags);
}
BOOL WINAPI myReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped){
	cout << "myReadFile" << endl;
	return ReadFile(hFile,lpBuffer,nNumberOfBytesToRead,lpNumberOfBytesRead,lpOverlapped);
}
DWORD WINAPI mySetFilePointer(HANDLE hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod){
	cout << "mySetFilePointer" << endl;
	return SetFilePointer(hFile,lDistanceToMove,lpDistanceToMoveHigh,dwMoveMethod);
}
BOOL WINAPI myFindClose(HANDLE hFile){
	cout << "myFindClose" << endl;
	return FindClose(hFile);
}
HANDLE WINAPI myFindFirstFileW(LPCTSTR lpFileName,LPWIN32_FIND_DATA lpFindFileData){
	cout << "myFindFirstFileW" << endl;
	return FindFirstFileW(lpFileName,lpFindFileData);
}
BOOL WINAPI myDeleteFileW(LPCTSTR lpFileName){
	cout << "myDeleteFileW" << endl;
	return DeleteFileW(lpFileName);
}
HANDLE WINAPI myCreateFileW(LPCTSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile){
	cout << "myCreateFileW" << endl;
	return CreateFileW(lpFileName,dwDesiredAccess,dwShareMode,lpSecurityAttributes,dwCreationDisposition,dwFlagsAndAttributes,hTemplateFile);
}
UINT WINAPI myGetPrivateProfileIntW(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault,LPCTSTR lpFileName){
	cout << "myGetPrivateProfileIntW" << endl;
	return GetPrivateProfileIntW(lpAppName,lpKeyName,nDefault,lpFileName);
}
DWORD WINAPI myGetPrivateProfileStringW(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpReturnedString,DWORD nSize,LPCTSTR lpFileName){
	cout << "myGetPrivateProfileStringW" << endl;
	return GetPrivateProfileStringW(lpAppName,lpKeyName,lpDefault,lpReturnedString,nSize,lpFileName);
}
BOOL WINAPI myWritePrivateProfileStringW(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpString,LPCTSTR lpFileName){
	cout << "myWritePrivateProfileStringW" << endl;
	return WritePrivateProfileStringW(lpAppName,lpKeyName,lpString,lpFileName);
}
BOOL WINAPI mySetFileAttributesW(LPCTSTR lpFileName,DWORD dwFileAttributes){
	cout << "mySetFileAttributesW" << endl;
	return SetFileAttributesW(lpFileName,dwFileAttributes);
}
DWORD WINAPI myGetCurrentProcessId( ){
	cout << "myGetCurrentProcessId" << endl;
	return GetCurrentProcessId();
}
HANDLE WINAPI myGetCurrentProcess( ){
	cout << "myGetCurrentProcess" << endl;
	return GetCurrentProcess();
}
BOOL WINAPI myProcess32Next(HANDLE hSnapshot,LPPROCESSENTRY32 lppe){
	cout << "myProcess32Next" << endl;
	return Process32Next(hSnapshot,lppe);
}
BOOL WINAPI myProcess32First(HANDLE hSnapshot,LPPROCESSENTRY32 lppe){
	cout << "myProcess32First" << endl;
	return Process32First(hSnapshot,lppe);
}
BOOL WINAPI myModule32Next(HANDLE hSnapshot,LPMODULEENTRY32 lpme){
	cout << "myModule32Next" << endl;
	return Module32Next(hSnapshot,lpme);
}
BOOL WINAPI myModule32First(HANDLE hSnapshot,LPMODULEENTRY32 lpme){
	cout << "myModule32First" << endl;
	return Module32First(hSnapshot,lpme);
}
HANDLE WINAPI myCreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID){
	cout << "myCreateToolhelp32Snapshot" << endl;
	return CreateToolhelp32Snapshot(dwFlags,th32ProcessID);
}
UINT WINAPI myWinExec(LPCSTR lpCmdLine,UINT uCmdShow){
	cout << "myWinExec" << endl;
	return WinExec(lpCmdLine,uCmdShow);
}
LPTSTR WINAPI mylstrcpyW(LPTSTR lpString1,LPTSTR lpString2){
	cout << "mylstrcpyW" << endl;
	return lstrcpyW(lpString1,lpString2);
}
LPTSTR WINAPI mylstrcatW(LPTSTR lpString1,LPTSTR lpString2){
	cout << "mylstrcatW" << endl;
	return lstrcatW(lpString1,lpString2);
}
int WINAPI mylstrcmpiW(LPCTSTR lpString1,LPCTSTR lpString2){
	cout << "mylstrcmpiW" << endl;
	return lstrcmpiW(lpString1,lpString2);
}
int WINAPI mylstrcmpW(LPCTSTR lpString1,LPCTSTR lpString2){
	cout << "mylstrcmpW" << endl;
	return lstrcmpW(lpString1,lpString2);
}
int WINAPI mylstrlenW(LPCTSTR lpString){
	cout << "mylstrlenW" << endl;
	return lstrlenW(lpString);
}
BOOL WINAPI myTerminateThread(HANDLE hThread,DWORD dwExitCode){
	cout << "myTerminateThread" << endl;
	return TerminateThread(hThread,dwExitCode);
}
BOOL WINAPI myTerminateProcess(HANDLE hProcess,UINT uExitCode){
	cout << "myTerminateProcess" << endl;
	return TerminateProcess(hProcess,uExitCode);
}
HANDLE WINAPI myOpenProcess(DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwProcessId){
	cout << "myOpenProcess" << endl;
	return OpenProcess(dwDesiredAccess,bInheritHandle,dwProcessId);
}
UINT WINAPI myGetWindowsDirectoryW(LPTSTR lpBuffer,UINT uSize){
	cout << "myGetWindowsDirectoryW" << endl;
	return GetWindowsDirectoryW(lpBuffer,uSize);
}
UINT WINAPI myGetSystemDirectoryW(LPTSTR lpBuffer,UINT uSize){
	cout << "myGetSystemDirectoryW" << endl;
	return GetSystemDirectoryW(lpBuffer,uSize);
}
HMODULE WINAPI myGetModuleHandleW(LPCTSTR lpModuleName){
	cout << "myGetModuleHandleW" << endl;
	return GetModuleHandleW(lpModuleName);
}
BOOL WINAPI myGetComputerNameW(LPTSTR lpBuffer,LPDWORD lpnSize){
	cout << "myGetComputerNameW" << endl;
	return GetComputerNameW(lpBuffer,lpnSize);
}
HANDLE WINAPI myCreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId){
	cout << "myCreateThread" << endl;
	return CreateThread(lpThreadAttributes,dwStackSize,lpStartAddress,lpParameter,dwCreationFlags,lpThreadId);
}
BOOL WINAPI myUnhookWindowsHookEx(HHOOK hhk){
	cout << "myUnhookWindowsHookEx" << endl;
	return UnhookWindowsHookEx(hhk);
}
HHOOK WINAPI mySetWindowsHookExW(int idHook,HOOKPROC lpfn,HINSTANCE hMod,DWORD dwThreadId){
	cout << "mySetWindowsHookExW" << endl;
	return SetWindowsHookExW(idHook,lpfn,hMod,dwThreadId);
}
DWORD WINAPI myGetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId){
	cout << "myGetWindowThreadProcessId" << endl;
	return GetWindowThreadProcessId(hWnd,lpdwProcessId);
}
int WINAPI myGetWindowTextW(HWND hWnd,LPTSTR lpString,int nMaxCount){
	cout << "myGetWindowTextW" << endl;
	return GetWindowTextW(hWnd,lpString,nMaxCount);
}
int WINAPI myGetClassNameW(HWND hWnd,LPTSTR lpClassName,int nMaxCount){
	cout << "myGetClassNameW" << endl;
	return GetClassNameW(hWnd,lpClassName,nMaxCount);
}
LRESULT WINAPI myCallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam){
	cout << "myCallNextHookEx" << endl;
	return CallNextHookEx(hhk,nCode,wParam,lParam);
}
extern "C" void __declspec(dllexport) __stdcall NativeInjectionEntryPoint(REMOTE_ENTRY_INFO* inRemoteInfo);
void __stdcall NativeInjectionEntryPoint(REMOTE_ENTRY_INFO* inRemoteInfo){
vector<HOOK_TRACE_INFO> hHooks(86, { NULL });
vector<NTSTATUS> hookStats;
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "DeleteCriticalSection"),myDeleteCriticalSection,NULL,&hHooks[0]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "LeaveCriticalSection"),myLeaveCriticalSection,NULL,&hHooks[1]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "EnterCriticalSection"),myEnterCriticalSection,NULL,&hHooks[2]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "VirtualFree"),myVirtualFree,NULL,&hHooks[3]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "LocalFree"),myLocalFree,NULL,&hHooks[4]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetCurrentThreadId"),myGetCurrentThreadId,NULL,&hHooks[5]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetStartupInfoW"),myGetStartupInfoW,NULL,&hHooks[6]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetCommandLineW"),myGetCommandLineW,NULL,&hHooks[7]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "FreeLibrary"),myFreeLibrary,NULL,&hHooks[8]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "ExitProcess"),myExitProcess,NULL,&hHooks[9]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WriteFile"),myWriteFile,NULL,&hHooks[10]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "UnhandledExceptionFilter"),myUnhandledExceptionFilter,NULL,&hHooks[11]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "RtlUnwind"),myRtlUnwind,NULL,&hHooks[12]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "RaiseException"),myRaiseException,NULL,&hHooks[13]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetStdHandle"),myGetStdHandle,NULL,&hHooks[14]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "GetKeyboardType"),myGetKeyboardType,NULL,&hHooks[15]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "MessageBoxW"),myMessageBoxW,NULL,&hHooks[16]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "RegQueryValueExW"),myRegQueryValueExW,NULL,&hHooks[17]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "RegOpenKeyExW"),myRegOpenKeyExW,NULL,&hHooks[18]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "RegCloseKey"),myRegCloseKey,NULL,&hHooks[19]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TlsSetValue"),myTlsSetValue,NULL,&hHooks[20]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TlsGetValue"),myTlsGetValue,NULL,&hHooks[21]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TlsFree"),myTlsFree,NULL,&hHooks[22]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TlsAlloc"),myTlsAlloc,NULL,&hHooks[23]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "LocalAlloc"),myLocalAlloc,NULL,&hHooks[24]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "closesocket"),myclosesocket,NULL,&hHooks[25]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "WSACleanup"),myWSACleanup,NULL,&hHooks[26]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "recv"),myrecv,NULL,&hHooks[27]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "send"),mysend,NULL,&hHooks[28]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "connect"),myconnect,NULL,&hHooks[29]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "socket"),mysocket,NULL,&hHooks[30]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "WSAStartup"),myWSAStartup,NULL,&hHooks[31]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("wsock32.dll")), "gethostbyname"),mygethostbyname,NULL,&hHooks[32]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "RegSetValueExW"),myRegSetValueExW,NULL,&hHooks[33]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "RegCreateKeyW"),myRegCreateKeyW,NULL,&hHooks[34]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "AdjustTokenPrivileges"),myAdjustTokenPrivileges,NULL,&hHooks[35]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "LookupPrivilegeValueW"),myLookupPrivilegeValueW,NULL,&hHooks[36]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("advapi32.dll")), "OpenProcessToken"),myOpenProcessToken,NULL,&hHooks[37]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "GetForegroundWindow"),myGetForegroundWindow,NULL,&hHooks[38]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "wvsprintfW"),mywvsprintfW,NULL,&hHooks[39]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CloseHandle"),myCloseHandle,NULL,&hHooks[40]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "RtlMoveMemory"),myRtlMoveMemory,NULL,&hHooks[41]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "RtlZeroMemory"),myRtlZeroMemory,NULL,&hHooks[42]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WriteProcessMemory"),myWriteProcessMemory,NULL,&hHooks[43]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "ReadProcessMemory"),myReadProcessMemory,NULL,&hHooks[44]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "VirtualProtect"),myVirtualProtect,NULL,&hHooks[45]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "Sleep"),mySleep,NULL,&hHooks[46]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetTickCount"),myGetTickCount,NULL,&hHooks[47]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "MoveFileExW"),myMoveFileExW,NULL,&hHooks[48]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "ReadFile"),myReadFile,NULL,&hHooks[49]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "SetFilePointer"),mySetFilePointer,NULL,&hHooks[50]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "FindClose"),myFindClose,NULL,&hHooks[51]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "FindFirstFileW"),myFindFirstFileW,NULL,&hHooks[52]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "DeleteFileW"),myDeleteFileW,NULL,&hHooks[53]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CreateFileW"),myCreateFileW,NULL,&hHooks[54]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetPrivateProfileIntW"),myGetPrivateProfileIntW,NULL,&hHooks[55]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetPrivateProfileStringW"),myGetPrivateProfileStringW,NULL,&hHooks[56]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WritePrivateProfileStringW"),myWritePrivateProfileStringW,NULL,&hHooks[57]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "SetFileAttributesW"),mySetFileAttributesW,NULL,&hHooks[58]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetCurrentProcessId"),myGetCurrentProcessId,NULL,&hHooks[59]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetCurrentProcess"),myGetCurrentProcess,NULL,&hHooks[60]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "Process32Next"),myProcess32Next,NULL,&hHooks[61]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "Process32First"),myProcess32First,NULL,&hHooks[62]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "Module32Next"),myModule32Next,NULL,&hHooks[63]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "Module32First"),myModule32First,NULL,&hHooks[64]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CreateToolhelp32Snapshot"),myCreateToolhelp32Snapshot,NULL,&hHooks[65]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WinExec"),myWinExec,NULL,&hHooks[66]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "lstrcpyW"),mylstrcpyW,NULL,&hHooks[67]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "lstrcatW"),mylstrcatW,NULL,&hHooks[68]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "lstrcmpiW"),mylstrcmpiW,NULL,&hHooks[69]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "lstrcmpW"),mylstrcmpW,NULL,&hHooks[70]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "lstrlenW"),mylstrlenW,NULL,&hHooks[71]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TerminateThread"),myTerminateThread,NULL,&hHooks[72]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "TerminateProcess"),myTerminateProcess,NULL,&hHooks[73]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "OpenProcess"),myOpenProcess,NULL,&hHooks[74]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetWindowsDirectoryW"),myGetWindowsDirectoryW,NULL,&hHooks[75]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetSystemDirectoryW"),myGetSystemDirectoryW,NULL,&hHooks[76]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetModuleHandleW"),myGetModuleHandleW,NULL,&hHooks[77]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "GetComputerNameW"),myGetComputerNameW,NULL,&hHooks[78]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CreateThread"),myCreateThread,NULL,&hHooks[79]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "UnhookWindowsHookEx"),myUnhookWindowsHookEx,NULL,&hHooks[80]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "SetWindowsHookExW"),mySetWindowsHookExW,NULL,&hHooks[81]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "GetWindowThreadProcessId"),myGetWindowThreadProcessId,NULL,&hHooks[82]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "GetWindowTextW"),myGetWindowTextW,NULL,&hHooks[83]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "GetClassNameW"),myGetClassNameW,NULL,&hHooks[84]));
hookStats.push_back(LhInstallHook(GetProcAddress(GetModuleHandle(TEXT("user32.dll")), "CallNextHookEx"),myCallNextHookEx,NULL,&hHooks[85]));
vector<NTSTATUS>::iterator it;
bool failed = false;
for (it = hookStats.begin(); it != hookStats.end(); it++) {
 if (FAILED(*it)) { failed = true;}
}
if(failed)
{
wstring(s);
wcout<< "NativeInjectionEntryPoint: Failed to install hook :" << s << endl;}else
{
cout << "NativeInjectionEntryPoint: Hook 'myBeepHook installed successfully." << endl;
}
ULONG ACLEntries[1] = { 0 };
LhSetExclusiveACL(ACLEntries, 1, &hHooks[0]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[1]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[2]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[3]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[4]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[5]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[6]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[7]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[8]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[9]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[10]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[11]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[12]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[13]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[14]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[15]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[16]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[17]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[18]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[19]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[20]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[21]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[22]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[23]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[24]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[25]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[26]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[27]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[28]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[29]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[30]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[31]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[32]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[33]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[34]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[35]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[36]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[37]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[38]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[39]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[40]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[41]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[42]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[43]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[44]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[45]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[46]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[47]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[48]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[49]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[50]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[51]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[52]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[53]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[54]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[55]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[56]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[57]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[58]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[59]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[60]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[61]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[62]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[63]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[64]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[65]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[66]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[67]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[68]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[69]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[70]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[71]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[72]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[73]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[74]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[75]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[76]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[77]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[78]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[79]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[80]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[81]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[82]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[83]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[84]);
LhSetExclusiveACL(ACLEntries, 1, &hHooks[85]);
RhWakeUpProcess();
}
