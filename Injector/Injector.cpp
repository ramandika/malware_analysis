// Injector.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "Reader.hpp"
#include <iostream>
#include <string>
#include <cstring>
#include <Windows.h>
#include <easyhook.h>

int _tmain(int argc, _TCHAR* argv[])
{
	if (argc != 3) {
		wprintf(L"Usage : Injector.exe <dll_path_to_load> <program_name_to_inject>");
		return 0;
	}
	WCHAR* dllToInject = argv[1];
	wprintf(L"Attempting to inject: %s\n\n", dllToInject);

	ULONG pid;
	ULONG *pulong = &pid;
	
	NTSTATUS nt = RhCreateAndInject(
		argv[2],
		NULL,
		NULL,
		EASYHOOK_INJECT_DEFAULT,
		dllToInject,
		NULL,
		NULL,
		NULL,
		pulong
	);
	
	//printf("Process with id: %lu created\n", *pulong);

	// Inject dllToInject into the target process Id, passing 
	// freqOffset as the pass through data.
	/*NTSTATUS nt = RhInjectLibrary(
		processId,   // The process to inject into
		0,           // ThreadId to wake up upon injection
		EASYHOOK_INJECT_DEFAULT,
		dllToInject, // 32-bit
		NULL,		 // 64-bit not provided
		&freqOffset, // data to send to injected DLL entry point
		sizeof(DWORD)// size of data to send
	);*/

	if (nt != 0)
	{
		printf("RhInjectLibrary failed with error code = %d\n", nt);
		PWCHAR err = RtlGetLastErrorString();
		std::wcout << err << "\n";
	}
	else 
	{
		//std::wcout << L"Library injected successfully.\n";
	}

	//std::wcout << "Press Enter to exit" << std::endl;
	std::wstring input;
	std::getline(std::wcin, input);
	std::getline(std::wcin, input);
	return 0;
}