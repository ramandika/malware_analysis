#pragma once
#include "stdafx.h"
#include "HookApi.h"
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <cstdio>
#include <algorithm> 
#include <functional> 
#include <cctype>
#include <locale>

using namespace std;

class Reader {
private:
	string filename;
	ifstream myReadFile;
	vector<HookApi> apilist;

	// trim from start
	static inline string &ltrim(string &s) {
		s.erase(s.begin(), find_if(s.begin(), s.end(),
			not1(ptr_fun<int, int>(isspace))));
		return s;
	}

	// trim from end
	static inline std::string &rtrim(std::string &s) {
		s.erase(std::find_if(s.rbegin(), s.rend(),
			std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());
		return s;
	}


public:
	Reader(string filepath) : filename(filepath) { myReadFile.open(this->filename); }
	vector<HookApi> read() {
		string line;
		if (myReadFile.is_open()) {
			for (std::string line; getline(myReadFile, line); )
			{
				int first_space_pos = line.find_first_of(' ');
				string module = line.substr(0, first_space_pos);
				string funcDef = line.substr(first_space_pos, line.length());
				funcDef = rtrim(ltrim(funcDef));
				HookApi hooking(module, funcDef);
				cout << hooking.getReturnType() << endl;
				/*vector<pair<string,string> >::iterator it;
				vector<pair<string, string> > p;
				p = hooking.getParams();
				for (it = p.begin(); it != p.end(); it++) {
					cout << it->first << "/" << it->second << endl;
				}
				cout << "??????" << endl;*/
				apilist.push_back(hooking);
			}
		}
		myReadFile.close();
		return apilist;
	}
};