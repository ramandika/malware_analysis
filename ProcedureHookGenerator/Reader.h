#pragma once
#include "stdafx.h"
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <cstdio>
#include <algorithm> 
#include <functional> 
#include <cctype>
#include <locale>

using namespace std;

class Reader {
private:
	string filename;
	ifstream myReadFile;
	vector<pair<string, string> > apilist;

	// trim from start
	static inline string &ltrim(string &s) {
		s.erase(s.begin(), find_if(s.begin(), s.end(),
			not1(ptr_fun<int, int>(isspace))));
		return s;
	}

	// trim from end
	static inline std::string &rtrim(std::string &s) {
		s.erase(std::find_if(s.rbegin(), s.rend(),
			std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());
		return s;
	}


public:
	Reader(string filepath) : filename(filepath) { myReadFile.open(this->filename); }
	void reading() {
		string line;
		if (myReadFile.is_open()) {
			for (std::string line; getline(myReadFile, line); )
			{
				int first_space_pos = line.find_first_of(' ');
				string module = line.substr(0, first_space_pos);
				string proc_name = line.substr(first_space_pos, line.length());
				proc_name = rtrim(ltrim(proc_name));
				apilist.push_back(make_pair(module, proc_name));
				//cout << proc_name << endl;
			}
		}
		myReadFile.close();
	}
};