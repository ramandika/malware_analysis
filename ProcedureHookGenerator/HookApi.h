#pragma once
#include <iostream>
#include <vector>

using namespace std;

class HookApi {
private :
	string modul;
	string returnType;
	string funcName;
	vector<pair<string, string> > vparams; //<type,value>
public :
	string getModul() { return modul; }
	string getReturnType() { return returnType; }
	string getFuncName() { return funcName; }
	vector<pair<string, string> > getParams() { return vparams; }
	HookApi(string modul, string funcDef) {
		this->modul = modul;
		int brackspos = funcDef.find('('); int brackepos = funcDef.find(')');
		int spacepos = brackspos;
		while (spacepos--) {
			if (funcDef.at(spacepos) == ' ') break;
		}
		this->funcName = funcDef.substr(spacepos + 1, brackspos-spacepos-1);
		this->returnType = funcDef.substr(0, spacepos);
		string type="", value="";
		int end = brackepos;
		for (int i = end; i >= brackspos; i--) {
			if (funcDef.at(i) == ' ' && !value.compare("")) {
				value = funcDef.substr(i+1, end - i - 1);
				end = i;
			}
			else if (funcDef.at(i) == ',' || funcDef.at(i)=='(') {
				type = funcDef.substr(i+1, end - i - 1);
				vparams.push_back(make_pair(type, value));
				end = i;
				type = value = "";
			}
		}
	}
};